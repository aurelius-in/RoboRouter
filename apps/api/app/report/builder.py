from __future__ import annotations

import hashlib
import json
from pathlib import Path
from typing import Any, Dict

from xhtml2pdf import pisa  # type: ignore[import-not-found]


def file_sha256(path: str) -> str:
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def build_html_report(scene_id: str, metrics: Dict[str, float], overlays: Dict[str, str], params: Dict[str, Any]) -> str:
    parts = [
        f"<h1>RoboRouter Report</h1>",
        f"<p><b>Scene:</b> {scene_id}</p>
         <h2>Metrics</h2>",
        "<ul>",
    ]
    for k, v in sorted(metrics.items()):
        parts.append(f"<li>{k}: {v:.4f}</li>")
    parts.append("</ul>")
    parts.append("<h2>Overlays</h2><ul>")
    for name, path in overlays.items():
        try:
            sha = file_sha256(path)
            parts.append(f"<li>{name}: {Path(path).name} (sha256: {sha[:12]}...)</li>")
        except Exception:
            parts.append(f"<li>{name}: {Path(path).name}</li>")
    parts.append("</ul>")
    parts.append("<h2>Parameters</h2>")
    parts.append(f"<pre>{json.dumps(params, indent=2)}</pre>")
    parts.append("<hr/><small>Generated by RoboRouter</small>")
    return "\n".join(parts)


def html_to_pdf(html: str, pdf_path: str) -> bool:
    with open(pdf_path, "wb") as out:
        result = pisa.CreatePDF(html, dest=out)
    return not result.err


